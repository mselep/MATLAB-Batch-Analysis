%% Impact Analysis Version 2
% Michael Selep
% May 2013

% Batch imports data acquisition files generated by LabView containing time, acceleration, and force data, and
% analyzes them to yield user-selected results.

% The batch import section of the code can easily be modified for use with any collection of data files that
% share a format. It is not married to the analysis portion of the script, but it's useless if you don't do
% anything with the data, so my particular application is included as an example.

clc
clear
close all

%% Options
enableaccelerationoverride = 1; % if the peak acceleration does not occur during the positive load curve period, assume this is caused by grounding-issue-related noise and define the start and end of the acceleration curve to be the points where the load curve starts and ends

plotbw = 0; % Formats plots for printing in black and white. Not recommended.
plotany = 1; % Will not plot anything if 0
  plotvoltage = 0;
  plotdata = 1;
  plotvelocity = 1;
  plotindentation = 0;
  plotforcedisplacement = 0;
  plotwork = 0;

scaledata = 1; % Enter 1 if data is in units of voltage, 0 if in units of m/s^2 and N
  accelscale = (1000)*(1/1.021)*(9.807); % (1000mV / 1V) * (1g / 1.021mV) * (9.807m/s^2 / 1g)
  loadscale = (1000)*(1/.219); % (1000mV / 1V) * (1N / .219mV)

windowtime = 20; % Time array length, in ms
zerotime = 1; % Choose where to reset time.  0:No Change  1:Start of Window = 0  2:Impact Peak = 0
zerodata = 1; % Choose whether or not to zero data based on first (window/4) data points
loadthreshold = 0; % Threshold for determination of the exact moment when impact starts/ends
accelthreshold = -9.81; % Threshold for determination of the exact moment when impact starts/ends

%% Batch Import Data
files = dir('*.txt');
[nfiles,~] = size(files);
usedatefolder = 0;
if nfiles == 0
    %[year,month,day,~,~,~] = datevec(date);
    year=2013;day=5;month=3;
    datefolder = [num2str(month),'-',num2str(day),'-',num2str(year)];
    files = dir([datefolder,'\*.txt']);
    usedatefolder = 1;
end
for dataset = 1:length(files)
    %% Pick File
    filename = files(dataset).name;
    
    %% Manipulate Name
    dots = strfind(filename,'.'); 
    ext = dots(length(dots));
    oldname = filename(1:ext-1);
    spaces = strfind(oldname,' ');

    if isempty(strfind(oldname,'kg '))
        % Specified in kg
        M = str2double(oldname( spaces(length(spaces)-1)+1 : spaces(length(spaces))-2 ))/1000; % Impactor mass (kg)
    else
        % Specified in g
        M = str2double(oldname( spaces(length(spaces)-1)+1 : spaces(length(spaces))-3 )); % Impactor mass (kg)
    end
    
    if isempty(strfind(oldname,'mmps'))
        % Specified in mps
        V = str2double(oldname( spaces(length(spaces))+1 : strfind(oldname,'mps')-1 )); % Expected impact velocity (m/s)
    else
        % Specified in mmps
        V = str2double(oldname( spaces(length(spaces))+1 : strfind(oldname,'mmps')-1 ))/1000; % Expected impact velocity (m/s
    end

    specimen = oldname(1:spaces(length(spaces)-1)-1); % Specimen name given in LabView VI
    name = [specimen,' ',num2str(M*1000),'g ',num2str(V),'m/s'];
    disp(['(',num2str(dataset),') ',name])
    
    %% Read Data
    if usedatefolder
        datastruct = importdata([datefolder,'\',filename],'\t',45);
    else
        datastruct = importdata(filename,'\t',45);
    end
    data = datastruct.data;
    info = datastruct.textdata(45); %Contains the user-specified impact info from the LabView script.  Delimited by '\\' and can be parsed easily if necessary in the future
    
    [~, loadpeakindex] = max(data(:,3));
    dt = data(2,1) - data(1,1);
    window = round(windowtime/dt/1000);
    t     = data(loadpeakindex-window/2:loadpeakindex+window/2,1); % s
    accel = data(loadpeakindex-window/2:loadpeakindex+window/2,2); % m/s^2
    load  = data(loadpeakindex-window/2:loadpeakindex+window/2,3); % N
    [~, loadpeakindex] = max(load); % Find new index for adjusted array lengths
    
    clear datastruct
    clear data
    
    %% Data Cleanup
    if scaledata ==1
        accelV = accel;
        loadV = load;
        accel = accel*accelscale;
        load = load*loadscale;
    end
    if zerotime == 2
        t = t-t(loadpeakindex);
    end
    if zerotime == 1
        t = t-t(1);
    end
    if zerodata == 1
        accel = accel - mean(accel(1:window/4)) - 9.81;
        load = load - mean(load(1:window/4));
    end        
        
    %% Calculations

    % Peak Load
    loadpeak = max(load); % N

    % Impact Duration and Time to Peak
    loadpeaktime = t(loadpeakindex);
    for j = 1:loadpeakindex
        i = loadpeakindex-j+1;
        if load(i) <= loadthreshold
            loadstartindex = i;
            loadstarttime = t(i);
            break
        end
    end
    for j = 1:loadpeakindex
        i = loadpeakindex+j-1;
        if load(i) <= loadthreshold
            loadendindex = i;
            loadendtime = t(i);
            break
        end
    end

    timetopeak = loadpeaktime-loadstarttime; % s
    duration = loadendtime-loadstarttime; % s

    
    % Peak Acceleration
    [accelpeak,accelpeakindex] = max(accel); % m/s^2
    
    % Starting and Ending Indices
    for j = 1:window*2
        i = accelpeakindex-j+1;
        if accel(i) <= accelthreshold
            accelstartindex = i;
            break
        end
    end
    for j = 1:window*2
        i = accelpeakindex+j-1;
        if accel(i) <= accelthreshold
            accelendindex = i;
            break
        end
    end
    
    %Revert acceleration start and end points to the load strt and end
    %points if the acceleration peak is outside the load curve and appears
    %to be caused by a grounding issur rather than actual impact
    if enableaccelerationoverride && (accelpeakindex < loadstartindex+(loadpeakindex-loadstartindex)*.5 || accelpeakindex > loadendindex-(loadendindex-loadpeakindex)*.5)
        overrideflag = 1;
        accelstartindex = loadstartindex;
        accelendindex = loadendindex;
        [accelpeak,accelpeakindex] = max(accel(ceil(loadstartindex+(loadpeakindex-loadstartindex)*.5) : floor(loadendindex-(loadendindex-loadpeakindex)*.5)));
        accelpeakindex = accelpeakindex + ceil(loadstartindex+(loadpeakindex-loadstartindex)*.5) - 1;
        accelendindex = loadendindex;
    end
    
    % Integrate for change in velocity and position
    deltav = cumtrapz(t(accelstartindex:accelendindex),accel(accelstartindex:accelendindex)); % Change in velocity (+z direction)
    v0 = 0; % Boundary condition velocity value
    v0index = accelpeakindex; % Boundary condition index
    velocity = deltav - deltav(v0index-accelstartindex+1) + v0; % Velocity (+z direction)
    deltax = -cumtrapz(t(accelstartindex:accelendindex),velocity);
    x0 = 0; % Boundary condition position value
    x0index = accelstartindex; % Boundary condition index
    indentation = deltax - deltax(x0index-accelstartindex+1) + x0;  % Impactor indentation into specimen (-z direction)
        
    
    % Calculate net work done on sample
    work = cumtrapz(indentation,load(accelstartindex:accelendindex)); % Net work done on specimen
    
    %% Output Data
    
    % Peak Load
    
    disp(['  Expected Impact Energy: ',num2str(.5*M*velocity(1)^2)])
    disp(['  Peak Load: ',num2str(loadpeak),' N'])
    disp(['  Peak Acceleration: ',num2str(accelpeak),' m/s^2'])
    disp(['  Impact Duration: ',num2str(duration*1000),' ms'])
    disp(['  Time to Peak: ',num2str(timetopeak*1000),' ms'])
    disp(['  Measured Impact Velocity: ',num2str(velocity(1)),' m/s'])
    disp(['  Indentation: ',num2str(max(indentation)*1000),' mm'])
    disp(['  Expected KE Before Impact: ',num2str(.5*M*V^2),' J'])
    disp(['  Measured KE Before Impact: ',num2str(.5*M*velocity(1)^2),' J'])
    disp(['  Impact Energy: ',num2str(max(work)),' J'])
    disp(['  Net Work on Specimen: ',num2str(work(length(work))),' J'])
    
    disp(['  Start Lag (ms): ',num2str((loadstartindex-accelstartindex)*dt*1000),' ms']) % Accel behind Load
    disp(['  Peak Lag (ms): ',num2str((loadpeakindex-accelpeakindex)*dt*1000),' ms'])
    disp(['  End Lag (ms): ',num2str((loadendindex-accelendindex)*dt*1000),' ms'])
    
    
    %% Plot Data
    if plotany == 1
        if plotvoltage == 1 && scaledata == 1
            figure(dataset*100)
            [AX,H1,H2] = plotyy(t*1000,accelV,t*1000,loadV);

            xlabel('Time (ms)')
            set(get(AX(1),'Ylabel'),'String','Accelerometer Output (V)')
            set(get(AX(2),'Ylabel'),'String','Load Cell Output (V)')
            if plotbw == 1
                set(H1,'Color','k')
                set(H2,'Color','k')
                set(H2,'LineStyle',':')
                set(H2,'LineWidth',1)
                set(AX,'Ycolor','k')
            elseif plotbw == 0
                set(H1,'Color','b')
                set(H2,'Color','r')
                set(AX(2),'Ycolor','r')
            end
            title(['Sensor Voltage Plot for ',name])
            legend('Acceleration','Load','Location','NorthWest')
            set(AX,'xlim',[0,windowtime])
        end
        if plotdata == 1
            figure(dataset*100+1)
            [AX,H1,H2] = plotyy(t*1000,accel,t*1000,load);
            xlabel('Time (ms)')
            set(get(AX(1),'Ylabel'),'String','Acceleration (m/s^2)')
            set(get(AX(2),'Ylabel'),'String','Load (N)')
            if plotbw == 1
                set(H1,'Color','k')
                set(H2,'Color','k')
                set(H2,'LineStyle',':')
                set(H2,'LineWidth',1)
                set(AX,'Ycolor','k')
            elseif plotbw == 0
                set(H1,'Color','b')
                set(H2,'Color','r')
                set(AX(2),'Ycolor','r')
            end
            title(['Impact Plot for ',name])
            legend('Acceleration','Load','Location','NorthWest')
            set(AX,'xlim',[0,windowtime])
        end
        if plotvelocity == 1
            figure(dataset*100+2)
            plot(t(accelstartindex:accelendindex)*1000,velocity,'k')
            ylabel('Velocity (m/s)')
            xlabel('Time (ms)')
            title(['Velocity Plot for ',name])
        end
        if plotindentation == 1
            figure(dataset*100+3)
            plot(t(accelstartindex:accelendindex)*1000,indentation*1000,'k')
            ylabel('Indentation (mm)')
            xlabel('Time (ms)')
            title(['Indentation Plot for ',name])
        end
        if plotforcedisplacement == 1
            figure(dataset*100+4)
            plot(indentation*1000,load(accelstartindex:accelendindex),'k')
            xlabel('Displacement (mm)')
            ylabel('Force (N)')
            title(['F-d Plot for ',name])
        end
        if plotwork == 1
            figure(dataset*100+5)
            plot(t(accelstartindex:accelendindex)*1000,work,'k')
            ylabel('Net Work (J)')
            xlabel('Time (ms)')
            title(['Work Plot for ',name])
        end
    end
    
    
    disp(' ')
end
